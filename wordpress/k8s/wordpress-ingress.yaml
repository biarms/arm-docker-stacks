apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: wordpress
  labels:
    io.kompose.service: wordpress
  # annotations:
  #   traefik.ingress.kubernetes.io/service.serversscheme: https
  #  kubernetes.io/ingress.class: traefik
  #  external-dns.alpha.kubernetes.io/hostname: *.mycompany.org#      http:
  #  traefik.ingress.kubernetes.io/router.entrypoints: web, websecure
  #  traefik.ingress.kubernetes.io/router.middlewares: redirect-http@kuberntes-crd
  #  traefik.frontend.rule.type: PathPrefixStrip
  #  nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: "wordpress.k8s.local" # Direct access to traefik on port 30080. IE: http://wordpress.k8s.local:30080/debug.php
      http:
        paths:
          - backend:
              serviceName: "wordpress"
              servicePort: 80
    - host: "wordpress.k8s.synology.local" # Access via the synology reverse proxy. IE: http://wordpress.k8s.synology.local/debug.php
      http:
        paths:
          - backend:
              serviceName: "wordpress"
              servicePort: 80
# NOK: :(
# ---
# apiVersion: extensions/v1beta1
# kind: Ingress
# metadata:
#   name: wordpress-https
#   labels:
#     io.kompose.service: wordpress-https
#   annotations:
#     kubernetes.io/ingress.class: traefik
#     traefik.ingress.kubernetes.io/service.serversscheme: https
# spec:
#   rules:
#     - host: "www.a-mon-tour.fr"
#       http:
#         paths:
#           - backend:
#               serviceName: "wordpress"
#               servicePort: 80
---
# IngressRoute sample: https://docs.traefik.io/routing/providers/kubernetes-crd/#configuration-examples
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: wordpress-ingress-route
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`secured-wordpress.k8s.synology.local`) || Host(`www.a-mon-tour.fr`)
      # To test with https protocol:
      # - via internal network only and untrusted certificate: https://secured-wordpress.k8s.synology.local:17443/debug.php
      # - via internet: https://www.a-mon-tour.fr:18443/debug.php
      kind: Rule
      middlewares:
        - name: "wordpress-https-header-middleware"
      services:
        - name: "wordpress"
          # scheme: https => Internal Server Error
          port: 80
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: "wordpress-https-header-middleware"
spec:
  headers:
    # Apparently, if Wordpress is access via 'http' behind a 'https' reverse proxy, Wordpress will use the 'X-Forwarded-Proto' header to generate html links. If unset, pages produces will mix http and https links.
    # See :
    #  - https://wordpress.stackexchange.com/questions/253544/mixed-content-with-ssl-wordpress-behind-a-reverse-proxy
    #  - https://managewp.com/blog/wordpress-ssl-settings-and-how-to-resolve-mixed-content-warnings
    #  - https://ahenriksson.com/2020/01/27/how-to-set-up-wordpress-behind-a-reverse-proxy-when-using-nginx/
    #  - https://wordpress.stackexchange.com/questions/253544/mixed-content-with-ssl-wordpress-behind-a-reverse-proxy
    # According to me, Traefik 2.2.0 still have the https://github.com/containous/traefik/issues/3886 bug (or a similar issue).
    # (I don't have debugged the network requests, but I was able to get my reverse proxy working via a NodePort, while it was not working if I add Traefik in the loop)
    # Therefore, as a hack, I have created this 'Traefik middleware' instance to workaround this issue.
    customRequestHeaders:
      X-Forwarded-Proto: 'https'
    #customResponseHeaders:
    #  X-Custom-Response-Header: "test (should be seen in browser debug mode)"