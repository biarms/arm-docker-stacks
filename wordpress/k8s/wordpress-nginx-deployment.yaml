kind: Deployment
apiVersion: apps/v1
metadata:
  name: wordpress-nginx
  labels:
    io.kompose.service: wordpress-nginx
spec:
  replicas: 1
  # About the replicas settings:
  #   Setting a value > 1 for the replicas is not a good idea, at least for the first installation: when a Wordpress pod is started for the first time and see an empty '/var/www/html' folder,
  #   it launches the provisioning of that folder.
  #   In that case, the logs of the first started pod will look like:
  #     > WordPress not found in /var/www/html - copying now...
  #   But the second pod will do the same, because there is no communication between both instance. In that case, the logs will look like:
  #     > WordPress not found in /var/www/html - copying now...
  #     > WARNING: /var/www/html is not empty! (copying anyhow)
  #
  selector:
    matchLabels:
      io.kompose.service: wordpress-nginx
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: wordpress-nginx
    spec:
      # If 2 replicats, don't put them on the same server !
      # See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: io.kompose.service
                    operator: In
                    values:
                      - wordpress-nginx
              topologyKey: "kubernetes.io/hostname"
      containers:
        - image: nginx
          name: wordpress-nginx
          # To debug nginx, uncomment next line (from https://stackoverflow.com/questions/36287157/docker-compose-nginx-php-fpm-file-not-found)
          # command: [nginx-debug, '-g', 'daemon off;']
          ports:
            - containerPort: 80
          resources:
            requests:
              memory: "16M"
              cpu: "0.2"
            limits:
              memory: "64M"
              cpu: "1"
          volumeMounts:
            - mountPath: /var/www/html
              name: wordpress-htdocs
            - name: wordpress-nginx-conf-volume
              mountPath: /etc/nginx/nginx.conf
              subPath: wordpress-nginx.conf
            - name: wordpress-ngnix-conf-d-volume
              mountPath: /etc/nginx/conf.d/
      restartPolicy: Always
      volumes:
        - name: wordpress-htdocs
          persistentVolumeClaim:
            claimName: wordpress-htdocs
        - name: wordpress-nginx-conf-volume
          configMap:
            name: wordpress-nginx-conf
        - name: wordpress-ngnix-conf-d-volume
          configMap:
            name: wordpress-nginx-conf-d
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-nginx-conf
data:
  # Don't forget to restart the pod if you change these settings !
  wordpress-nginx.conf: |
    user  nginx;
    # worker_processes default is 1
    worker_processes  2; #It is a good idea to map this value with the k8s cpu resources assigned to the nginx pods. See https://howto.wared.fr/installation-wordpress-ubuntu-nginx/

    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;


    events {
        worker_connections  1024;
    }


    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  65;

        #gzip  on;

        include /etc/nginx/conf.d/*.conf;
    }
  default-nginx.conf: |
    user  nginx;
    worker_processes  1;

    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;


    events {
        worker_connections  1024;
    }


    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  65;

        #gzip  on;

        include /etc/nginx/conf.d/*.conf;
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-nginx-conf-d
data:
  # Don't forget to restart the pod if you change these settings !
  wordpress.conf: |
    upstream php-wp-upstream {
        # server            unix:/var/run/myblog.sock;
        server wordpress-fpm:9000;
    }

    # Section inspired by https://www.howtoforge.com/tutorial/dockerizing-wordpress-with-nginx-and-php-fpm/
    server {
        listen 80;
        # server_name wordpress-nginx;

        root /var/www/html;
        index index.php;

        error_log /dev/stdout info;
        access_log /dev/stdout; #/var/log/nginx/access.log;
        error_log /dev/stdout; #/var/log/nginx/error.log;

        location / {
            try_files $uri $uri/ /index.php?$args;
        }

        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass php-wp-upstream;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
            # Increasing timeout is also mandatory with 'slow' ARM devices (especially when you authorize the upload of huge files that will have to be processed !
            fastcgi_read_timeout 600;
        }

        # default for server_tokens is unset 'empty line'
        server_tokens off; # for security reason, don't send nginx server version to client (see https://howto.wared.fr/installation-wordpress-ubuntu-nginx/)

        location = /favicon.ico {
    		log_not_found off;
    		access_log    off;
    	}

        location = /robots.txt {
            allow                    all;
            log_not_found off;
            access_log    off;
        }

        location ~* .(js|css|png|jpg|jpeg|gif|ico)$ {
    		expires       max;
    		log_not_found off;
    	}

        # Mandatory if we want to be able to upload huge files !
        client_max_body_size 256M;

        # Increasing timeout is also mandatory with 'slow' ARM devices (especially when you authorize the upload of huge files that will have to be processed !
        # See https://murviel-info-beziers.com/reparer-lerreur-504-gateway-timeout-nginx/ :
        proxy_connect_timeout       600;
        proxy_send_timeout          600;
        proxy_read_timeout          600;
        send_timeout                600;
    }
